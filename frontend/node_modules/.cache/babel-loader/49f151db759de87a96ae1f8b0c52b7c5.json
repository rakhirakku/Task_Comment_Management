{"ast":null,"code":"var _jsxFileName = \"/home/rakhi/Project/Laravel-Task/src/Pages/TaskDetails/CommentForm/CommentForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport './CommentForm.scss';\nimport { fetchComments, postComment } from '../../../api'; // Corrected import path\n\nconst CommentForm = ({\n  taskId\n}) => {\n  // State for form inputs\n  const [author_name, setName] = useState(\"\"); // Author name input\n  const [content, setComment] = useState(\"\"); // Comment content input\n  const [comments, setComments] = useState([]); // State to store all comments\n  const [error, setError] = useState(null); // State for error handling\n  const [popupVisible, setPopupVisible] = useState(false); // State for success popup visibility\n\n  // Fetch comments when the component mounts or taskId changes\n  useEffect(() => {\n    if (!taskId) {\n      console.error('Task ID is missing');\n      return; // Early return if taskId is not provided\n    }\n    const getComments = async () => {\n      try {\n        const data = await fetchComments(taskId); // Fetch comments by task ID\n        setComments(data || []); // Update comments state with fetched data\n      } catch (err) {\n        console.error(\"Error fetching comments:\", err);\n        setError(\"Failed to fetch comments.\"); // Display error if fetching fails\n      }\n    };\n    getComments(); // Call the function to fetch comments\n  }, [taskId]);\n\n  // Handle form submission for adding a new comment\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent page reload on form submission\n\n    // Validate input fields\n    if (author_name && content) {\n      try {\n        const newComment = {\n          author_name,\n          content,\n          taskId\n        }; // Prepare new comment data\n        const savedComment = await postComment(newComment); // Post new comment to API\n\n        // Add the saved comment to the current comments list\n        setComments(prevComments => [...prevComments, savedComment]);\n\n        // Clear input fields after successful submission\n        setName(\"\");\n        setComment(\"\");\n\n        // Show success popup\n        setPopupVisible(true);\n\n        // Hide the popup after 3 seconds\n        setTimeout(() => {\n          setPopupVisible(false);\n        }, 3000);\n      } catch (err) {\n        console.error(\"Error submitting comment:\", err);\n        setError(\"Failed to submit comment.\"); // Display error if submission fails\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, error), popupVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Comment added successfully!\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"comment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 col-md-4 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"name\",\n    value: author_name,\n    onChange: e => setName(e.target.value) // Update author_name state\n    ,\n    placeholder: \"Name\",\n    required: true // Make input required\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 col-md-4 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    id: \"text-area\",\n    placeholder: \"Please add a comment\",\n    rows: \"3\",\n    value: content,\n    onChange: e => setComment(e.target.value) // Update content state\n    ,\n    required: true // Make input required\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-secondary px-4 mt-2 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"comment-list mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, comments && comments.length > 0 ? comments.map((commentItem, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"author-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, commentItem.author_name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"comment-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, commentItem.content))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"No comments yet.\") // Fallback message for empty comments\n  ));\n};\nexport default CommentForm;","map":{"version":3,"names":["React","useState","useEffect","fetchComments","postComment","CommentForm","taskId","author_name","setName","content","setComment","comments","setComments","error","setError","popupVisible","setPopupVisible","console","getComments","data","err","handleSubmit","e","preventDefault","newComment","savedComment","prevComments","setTimeout","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","value","onChange","target","placeholder","required","rows","length","map","commentItem","index","key"],"sources":["/home/rakhi/Project/Laravel-Task/src/Pages/TaskDetails/CommentForm/CommentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CommentForm.scss';\nimport { fetchComments, postComment } from '../../../api'; // Corrected import path\n\nconst CommentForm = ({ taskId }) => {\n  // State for form inputs\n  const [author_name, setName] = useState(\"\"); // Author name input\n  const [content, setComment] = useState(\"\"); // Comment content input\n  const [comments, setComments] = useState([]); // State to store all comments\n  const [error, setError] = useState(null); // State for error handling\n  const [popupVisible, setPopupVisible] = useState(false); // State for success popup visibility\n\n  // Fetch comments when the component mounts or taskId changes\n  useEffect(() => {\n    if (!taskId) {\n      console.error('Task ID is missing');\n      return; // Early return if taskId is not provided\n    }\n\n    const getComments = async () => {\n      try {\n        const data = await fetchComments(taskId); // Fetch comments by task ID\n        setComments(data || []); // Update comments state with fetched data\n      } catch (err) {\n        console.error(\"Error fetching comments:\", err);\n        setError(\"Failed to fetch comments.\"); // Display error if fetching fails\n      }\n    };\n\n    getComments(); // Call the function to fetch comments\n  }, [taskId]);\n\n  // Handle form submission for adding a new comment\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Prevent page reload on form submission\n\n    // Validate input fields\n    if (author_name && content) {\n      try {\n        const newComment = { author_name, content, taskId }; // Prepare new comment data\n        const savedComment = await postComment(newComment); // Post new comment to API\n\n        // Add the saved comment to the current comments list\n        setComments((prevComments) => [...prevComments, savedComment]);\n\n        // Clear input fields after successful submission\n        setName(\"\");\n        setComment(\"\");\n\n        // Show success popup\n        setPopupVisible(true);\n\n        // Hide the popup after 3 seconds\n        setTimeout(() => {\n          setPopupVisible(false);\n        }, 3000);\n      } catch (err) {\n        console.error(\"Error submitting comment:\", err);\n        setError(\"Failed to submit comment.\"); // Display error if submission fails\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* Error Message */}\n      {error && <div className=\"error-message\">{error}</div>}\n\n      {/* Success Popup */}\n      {popupVisible && (\n        <div className=\"popup-success\">\n          <p>Comment added successfully!</p>\n        </div>\n      )}\n\n      {/* Comment Form */}\n      <form className=\"comment-form\" onSubmit={handleSubmit}>\n        {/* Name Input */}\n        <div className=\"col-12 col-md-4 mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={author_name}\n            onChange={(e) => setName(e.target.value)} // Update author_name state\n            placeholder=\"Name\"\n            required // Make input required\n          />\n        </div>\n\n        {/* Comment Input */}\n        <div className=\"col-12 col-md-4 mb-4\">\n          <textarea\n            className=\"form-control\"\n            id=\"text-area\"\n            placeholder=\"Please add a comment\"\n            rows=\"3\"\n            value={content}\n            onChange={(e) => setComment(e.target.value)} // Update content state\n            required // Make input required\n          ></textarea>\n        </div>\n\n        {/* Submit Button */}\n        <button type=\"submit\" className=\"btn btn-secondary px-4 mt-2 mb-4\">\n          Submit\n        </button>\n      </form>\n\n      <hr />\n\n      {/* Comments Section */}\n      <h4>Comments</h4>\n      <ul className=\"comment-list mt-4\">\n        {comments && comments.length > 0 ? (\n          comments.map((commentItem, index) => (\n            <li key={index}>\n              {/* Display author name */}\n              <span className=\"author-name\">{commentItem.author_name}</span>\n              {/* Display comment content */}\n              <p className=\"comment-content\">{commentItem.content}</p>\n            </li>\n          ))\n        ) : (\n          <p>No comments yet.</p> // Fallback message for empty comments\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default CommentForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}