{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the Laravel API\nconst API_URL = 'http://localhost:8000/api'; // Update with the correct API base URL\n\n/**\n * Fetch all tasks\n * @returns {Promise<Object[]>} - Array of task objects\n */\nexport const fetchTasks = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error; // Pass the error to be handled by the calling function\n  }\n};\n\n/**\n * Create a new task\n * @param {Object} task - Task data to create\n * @returns {Promise<Object>} - Created task object\n */\nexport const createTask = async task => {\n  try {\n    const response = await axios.post(`${API_URL}/tasks`, task);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n/**\n * Get task details by ID\n * @param {number} id - Task ID\n * @returns {Promise<Object>} - Task details object\n */\nexport const fetchTaskDetails = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching task details:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch comments for a specific task\n * @param {number} taskId - Task ID\n * @returns {Promise<Object[]>} - Array of comments\n */\nexport const fetchComments = async taskId => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks/${taskId}/comments`);\n    return response.data; // Assuming API returns an array of comments\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\n\n/**\n * Post a new comment for a specific task\n * @param {Object} comment - Comment data (includes taskId, author, content, etc.)\n * @returns {Promise<Object>} - Saved comment object\n */\nexport const postComment = async comment => {\n  try {\n    const response = await axios.post(`${API_URL}/tasks/${comment.taskId}/comments`, comment);\n    return response.data; // Assuming API returns the saved comment object\n  } catch (error) {\n    console.error('Error adding comments:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch filtered tasks based on due date range, status, and pagination\n * @param {string} selectedStartDate - Start of the due date range (optional)\n * @param {string} selectedEndDate - End of the due date range (optional)\n * @param {string} selectedStatus - Task status filter (optional)\n * @param {number} page - Current page for pagination (default: 1)\n * @returns {Promise<Object>} - Filtered tasks with pagination metadata\n */\nexport const fetchFilterTasks = async (selectedStartDate = '', selectedEndDate = '', selectedStatus = '', page = 1) => {\n  try {\n    const url = `${API_URL}/tasks`; // Base URL for tasks\n    const params = {}; // Query parameters for filtering\n\n    // Add filters if provided\n    if (selectedStartDate) {\n      params.due_date_from = selectedStartDate; // Start date filter\n    }\n    if (selectedEndDate) {\n      params.due_date_to = selectedEndDate; // End date filter\n    }\n    if (selectedStatus) {\n      params.status = selectedStatus; // Status filter\n    }\n\n    // Pagination parameters\n    params.page = page;\n    params.per_page = 8; // Items per page\n\n    // Make API call with query parameters\n    const response = await axios.get(url, {\n      params\n    });\n    return response.data; // Return filtered tasks and pagination metadata\n  } catch (error) {\n    console.error('Error fetching filtered tasks:', error);\n    throw error; // Pass the error to be handled by the calling function\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchTasks","response","get","data","error","console","createTask","task","post","fetchTaskDetails","id","fetchComments","taskId","postComment","comment","fetchFilterTasks","selectedStartDate","selectedEndDate","selectedStatus","page","url","params","due_date_from","due_date_to","status","per_page"],"sources":["/home/rakhi/Project/Laravel-Task/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for the Laravel API\nconst API_URL = 'http://localhost:8000/api'; // Update with the correct API base URL\n\n/**\n * Fetch all tasks\n * @returns {Promise<Object[]>} - Array of task objects\n */\nexport const fetchTasks = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error; // Pass the error to be handled by the calling function\n  }\n};\n\n/**\n * Create a new task\n * @param {Object} task - Task data to create\n * @returns {Promise<Object>} - Created task object\n */\nexport const createTask = async (task) => {\n  try {\n    const response = await axios.post(`${API_URL}/tasks`, task);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n/**\n * Get task details by ID\n * @param {number} id - Task ID\n * @returns {Promise<Object>} - Task details object\n */\nexport const fetchTaskDetails = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching task details:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch comments for a specific task\n * @param {number} taskId - Task ID\n * @returns {Promise<Object[]>} - Array of comments\n */\nexport const fetchComments = async (taskId) => {\n  try {\n    const response = await axios.get(`${API_URL}/tasks/${taskId}/comments`);\n    return response.data; // Assuming API returns an array of comments\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\n\n/**\n * Post a new comment for a specific task\n * @param {Object} comment - Comment data (includes taskId, author, content, etc.)\n * @returns {Promise<Object>} - Saved comment object\n */\nexport const postComment = async (comment) => {\n  try {\n    const response = await axios.post(`${API_URL}/tasks/${comment.taskId}/comments`, comment);\n    return response.data; // Assuming API returns the saved comment object\n  } catch (error) {\n    console.error('Error adding comments:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch filtered tasks based on due date range, status, and pagination\n * @param {string} selectedStartDate - Start of the due date range (optional)\n * @param {string} selectedEndDate - End of the due date range (optional)\n * @param {string} selectedStatus - Task status filter (optional)\n * @param {number} page - Current page for pagination (default: 1)\n * @returns {Promise<Object>} - Filtered tasks with pagination metadata\n */\nexport const fetchFilterTasks = async (\n  selectedStartDate = '',\n  selectedEndDate = '',\n  selectedStatus = '',\n  page = 1\n) => {\n  try {\n    const url = `${API_URL}/tasks`; // Base URL for tasks\n    const params = {}; // Query parameters for filtering\n\n    // Add filters if provided\n    if (selectedStartDate) {\n      params.due_date_from = selectedStartDate; // Start date filter\n    }\n    if (selectedEndDate) {\n      params.due_date_to = selectedEndDate; // End date filter\n    }\n    if (selectedStatus) {\n      params.status = selectedStatus; // Status filter\n    }\n\n    // Pagination parameters\n    params.page = page;\n    params.per_page = 8; // Items per page\n\n    // Make API call with query parameters\n    const response = await axios.get(url, { params });\n    return response.data; // Return filtered tasks and pagination metadata\n  } catch (error) {\n    console.error('Error fetching filtered tasks:', error);\n    throw error; // Pass the error to be handled by the calling function\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}